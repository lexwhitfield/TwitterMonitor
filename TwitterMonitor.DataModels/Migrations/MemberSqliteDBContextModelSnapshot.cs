// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterMonitor.DataModels.Sqlite;

namespace TwitterMonitor.DataModels.Migrations
{
    [DbContext(typeof(MemberSqliteDBContext))]
    partial class MemberSqliteDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1");

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OnsId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaTypeId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommitteeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedFromCommitteeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCommonsAppointed")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLordsAppointed")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCommons")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLords")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCommitteeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeTypeId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.CommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommitteeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndNote")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAlternate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCoOpted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExOfficio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.CommitteeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommitteeTypes");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Constituency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClerksConstituencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConstituencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OldDisId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OldDodsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnsCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("OsName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PcaCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PconName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrevConstituencyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolsSubsidyBand")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstituencyTypeId");

                    b.ToTable("Constituencies");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstituencyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ConstituencyId");

                    b.ToTable("ConstituencyAreas");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstituencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryType")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstituencyId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("MemberId");

                    b.ToTable("ConstituencyMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConstituencyTypes");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acronym")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Minister")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Secretary")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ElectionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ElectionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ElectionTypeId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ElectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ElectionTypes");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Happened")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GovernmentRankId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HansardName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Promoted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentRankId");

                    b.ToTable("GovernmentPosts");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPostDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GovernmentPostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GovernmentPostId");

                    b.ToTable("GovernmentPostDepartments");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPostMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GovernmentPostId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentPostId");

                    b.HasIndex("MemberId");

                    b.ToTable("GovernmentPostMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClerksRank")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinisterialRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatsRank")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GovernmentRanks");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.HouseMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("MemberId");

                    b.ToTable("HouseMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClerksId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DodsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forename")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PimsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TitleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TwitterUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("HouseId");

                    b.HasIndex("TitleId");

                    b.HasIndex("TwitterUserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HansardName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OppositionRankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Promoted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OppositionRankId");

                    b.ToTable("OppositionPosts");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPostDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OppositionPostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OppositionPostId");

                    b.ToTable("OppositionPostDepartments");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPostMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OppositionPostId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("OppositionPostId");

                    b.ToTable("OppositionPostMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClerksRank")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinisterialRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatsRank")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OppositionRanks");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ExcludeFromCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HansardName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCommons")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLords")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParliamentaryRankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Promoted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParliamentaryRankId");

                    b.ToTable("ParliamentaryPosts");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryPostMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParliamentaryPostId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ParliamentaryPostId");

                    b.ToTable("ParliamentaryPostMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParliamentaryRanks");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Colour")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HoLIsSpiritualSide")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HoLMainParty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HoLOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Initials")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCommons")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLords")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OldDisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextColour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.PartyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyMembers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.TwitterFriends", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FriendId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("TwitterFriends");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.TwitterStats", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FollowerCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FriendCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TwitterStats");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.TwitterUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScreenName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TwitterUsers");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Area", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.AreaType", "AreaType")
                        .WithMany("Areas")
                        .HasForeignKey("AreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Committee", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.CommitteeType", "CommitteeType")
                        .WithMany("Committees")
                        .HasForeignKey("CommitteeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.CommitteeMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("Committees")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Constituency", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyType", "ConstituencyType")
                        .WithMany("Constituencies")
                        .HasForeignKey("ConstituencyTypeId");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyArea", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Area", "Area")
                        .WithMany("ConstituencyAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Constituency", "Constituency")
                        .WithMany("ConstituencyAreas")
                        .HasForeignKey("ConstituencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ConstituencyMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Constituency", "Constituency")
                        .WithMany()
                        .HasForeignKey("ConstituencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("Constituencies")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Election", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.ElectionType", "ElectionType")
                        .WithMany("Elections")
                        .HasForeignKey("ElectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPost", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.GovernmentRank", "GovernmentRank")
                        .WithMany()
                        .HasForeignKey("GovernmentRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPostDepartment", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPost", "GovernmentPost")
                        .WithMany()
                        .HasForeignKey("GovernmentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPostMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.GovernmentPost", "GovernmentPost")
                        .WithMany()
                        .HasForeignKey("GovernmentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("GovernmentPosts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.HouseMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("Houses")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.Member", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Gender", "Gender")
                        .WithMany("Members")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.House", null)
                        .WithMany("Members")
                        .HasForeignKey("HouseId");

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Title", "Title")
                        .WithMany("Members")
                        .HasForeignKey("TitleId");

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.TwitterUser", null)
                        .WithMany("Member")
                        .HasForeignKey("TwitterUserId");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPost", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.OppositionRank", "OppositionRank")
                        .WithMany()
                        .HasForeignKey("OppositionRankId");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPostDepartment", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.OppositionPost", "OppositionPost")
                        .WithMany()
                        .HasForeignKey("OppositionPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.OppositionPostMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("OppositionPosts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.OppositionPost", "OppositionPost")
                        .WithMany()
                        .HasForeignKey("OppositionPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryPost", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryRank", "ParliamentaryRank")
                        .WithMany("ParliamentaryPosts")
                        .HasForeignKey("ParliamentaryRankId");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryPostMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany("ParliamentaryPosts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.ParliamentaryPost", "ParliamentaryPost")
                        .WithMany()
                        .HasForeignKey("ParliamentaryPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.PartyMember", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.TwitterFriends", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.TwitterUser", "Friend")
                        .WithMany("TwitterFriendsFriend")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.TwitterUser", "User")
                        .WithMany("TwitterFriendsUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterMonitor.DataModels.Sqlite.Models.TwitterStats", b =>
                {
                    b.HasOne("TwitterMonitor.DataModels.Sqlite.Models.TwitterUser", "TwitterUser")
                        .WithOne("TwitterStats")
                        .HasForeignKey("TwitterMonitor.DataModels.Sqlite.Models.TwitterStats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
